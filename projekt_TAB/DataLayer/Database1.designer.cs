#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System;

namespace DataLayer
{
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DRA4")]
	public partial class DatabaseDataContext : DataContext
	{
		
		private static MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAcMan(AcMan instance);
    partial void UpdateAcMan(AcMan instance);
    partial void DeleteAcMan(AcMan instance);
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertIssue(Issue instance);
    partial void UpdateIssue(Issue instance);
    partial void DeleteIssue(Issue instance);
    partial void InsertIssue_status_history(Issue_status_history instance);
    partial void UpdateIssue_status_history(Issue_status_history instance);
    partial void DeleteIssue_status_history(Issue_status_history instance);
    partial void InsertIssue_Type(Issue_Type instance);
    partial void UpdateIssue_Type(Issue_Type instance);
    partial void DeleteIssue_Type(Issue_Type instance);
    partial void InsertMan(Man instance);
    partial void UpdateMan(Man instance);
    partial void DeleteMan(Man instance);
    partial void InsertProdMan(ProdMan instance);
    partial void UpdateProdMan(ProdMan instance);
    partial void DeleteProdMan(ProdMan instance);
    partial void InsertRequest(Request instance);
    partial void UpdateRequest(Request instance);
    partial void DeleteRequest(Request instance);
    partial void InsertRequest_status_history(Request_status_history instance);
    partial void UpdateRequest_status_history(Request_status_history instance);
    partial void DeleteRequest_status_history(Request_status_history instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertSystem(System instance);
    partial void UpdateSystem(System instance);
    partial void DeleteSystem(System instance);
    partial void InsertSystem_Client(System_Client instance);
    partial void UpdateSystem_Client(System_Client instance);
    partial void DeleteSystem_Client(System_Client instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTask_status_history(Task_status_history instance);
    partial void UpdateTask_status_history(Task_status_history instance);
    partial void DeleteTask_status_history(Task_status_history instance);
    partial void InsertTask_Type(Task_Type instance);
    partial void UpdateTask_Type(Task_Type instance);
    partial void DeleteTask_Type(Task_Type instance);
    partial void InsertWorker(Worker instance);
    partial void UpdateWorker(Worker instance);
    partial void DeleteWorker(Worker instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::DataLayer.Properties.Settings.Default.DRA4ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(IDbConnection connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Table<AcMan> AcMan
		{
			get
			{
				return this.GetTable<AcMan>();
			}
		}
		
		public Table<Admin> Admin
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public Table<Client> Client
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public Table<Issue> Issue
		{
			get
			{
				return this.GetTable<Issue>();
			}
		}
		
		public Table<Issue_status_history> Issue_status_history
		{
			get
			{
				return this.GetTable<Issue_status_history>();
			}
		}
		
		public Table<Issue_Type> Issue_Type
		{
			get
			{
				return this.GetTable<Issue_Type>();
			}
		}
		
		public Table<Man> Man
		{
			get
			{
				return this.GetTable<Man>();
			}
		}
		
		public Table<ProdMan> ProdMan
		{
			get
			{
				return this.GetTable<ProdMan>();
			}
		}
		
		public Table<Request> Request
		{
			get
			{
				return this.GetTable<Request>();
			}
		}
		
		public Table<Request_status_history> Request_status_history
		{
			get
			{
				return this.GetTable<Request_status_history>();
			}
		}
		
		public Table<Role> Role
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public Table<System> System
		{
			get
			{
				return this.GetTable<System>();
			}
		}
		
		public Table<System_Client> System_Client
		{
			get
			{
				return this.GetTable<System_Client>();
			}
		}
		
		public Table<Task> Task
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public Table<Task_status_history> Task_status_history
		{
			get
			{
				return this.GetTable<Task_status_history>();
			}
		}
		
		public Table<Task_Type> Task_Type
		{
			get
			{
				return this.GetTable<Task_Type>();
			}
		}
		
		public Table<Worker> Worker
		{
			get
			{
				return this.GetTable<Worker>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AcMan")]
	public partial class AcMan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_acc;
		
		private EntitySet<Request> _Request;
		
		private EntityRef<Man> _Man;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Onid_accChanging(int value);
    partial void Onid_accChanged();
    #endregion
		
		public AcMan()
		{
			this._Request = new EntitySet<Request>(new Action<Request>(this.attach_Request), new Action<Request>(this.detach_Request));
			this._Man = default(EntityRef<Man>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_acc", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_acc
		{
			get
			{
				return this._id_acc;
			}
			set
			{
				if ((this._id_acc != value))
				{
					if (this._Man.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_accChanging(value);
					this.SendPropertyChanging();
					this._id_acc = value;
					this.SendPropertyChanged("id_acc");
					this.Onid_accChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcMan_Request", Storage="_Request", ThisKey="id_acc", OtherKey="acman_id")]
		public EntitySet<Request> Request
		{
			get
			{
				return this._Request;
			}
			set
			{
				this._Request.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Man_AcMan", Storage="_Man", ThisKey="id_acc", OtherKey="id_man", IsForeignKey=true)]
		public Man Man
		{
			get
			{
				return this._Man.Entity;
			}
			set
			{
				Man previousValue = this._Man.Entity;
				if (((previousValue != value) 
							|| (this._Man.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Man.Entity = null;
						previousValue.AcMan = null;
					}
					this._Man.Entity = value;
					if ((value != null))
					{
						value.AcMan = this;
						this._id_acc = value.id_man;
					}
					else
					{
						this._id_acc = default(int);
					}
					this.SendPropertyChanged("Man");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Request(Request entity)
		{
			this.SendPropertyChanging();
			entity.AcMan = this;
		}
		
		private void detach_Request(Request entity)
		{
			this.SendPropertyChanging();
			entity.AcMan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_admin;
		
		private EntityRef<Man> _Man;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Onid_adminChanging(int value);
    partial void Onid_adminChanged();
    #endregion
		
		public Admin()
		{
			this._Man = default(EntityRef<Man>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_admin", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_admin
		{
			get
			{
				return this._id_admin;
			}
			set
			{
				if ((this._id_admin != value))
				{
					if (this._Man.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_adminChanging(value);
					this.SendPropertyChanging();
					this._id_admin = value;
					this.SendPropertyChanged("id_admin");
					this.Onid_adminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Man_Admin", Storage="_Man", ThisKey="id_admin", OtherKey="id_man", IsForeignKey=true)]
		public Man Man
		{
			get
			{
				return this._Man.Entity;
			}
			set
			{
				Man previousValue = this._Man.Entity;
				if (((previousValue != value) 
							|| (this._Man.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Man.Entity = null;
						previousValue.Admin = null;
					}
					this._Man.Entity = value;
					if ((value != null))
					{
						value.Admin = this;
						this._id_admin = value.id_man;
					}
					else
					{
						this._id_admin = default(int);
					}
					this.SendPropertyChanged("Man");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_cli;
		
		private EntitySet<System_Client> _System_Client;
		
		private EntityRef<Man> _Man;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Onid_cliChanging(int value);
    partial void Onid_cliChanged();
    #endregion
		
		public Client()
		{
			this._System_Client = new EntitySet<System_Client>(new Action<System_Client>(this.attach_System_Client), new Action<System_Client>(this.detach_System_Client));
			this._Man = default(EntityRef<Man>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_cli", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_cli
		{
			get
			{
				return this._id_cli;
			}
			set
			{
				if ((this._id_cli != value))
				{
					if (this._Man.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_cliChanging(value);
					this.SendPropertyChanging();
					this._id_cli = value;
					this.SendPropertyChanged("id_cli");
					this.Onid_cliChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_System_Client", Storage="_System_Client", ThisKey="id_cli", OtherKey="client_id")]
		public EntitySet<System_Client> System_Client
		{
			get
			{
				return this._System_Client;
			}
			set
			{
				this._System_Client.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Man_Client", Storage="_Man", ThisKey="id_cli", OtherKey="id_man", IsForeignKey=true)]
		public Man Man
		{
			get
			{
				return this._Man.Entity;
			}
			set
			{
				Man previousValue = this._Man.Entity;
				if (((previousValue != value) 
							|| (this._Man.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Man.Entity = null;
						previousValue.Client = null;
					}
					this._Man.Entity = value;
					if ((value != null))
					{
						value.Client = this;
						this._id_cli = value.id_man;
					}
					else
					{
						this._id_cli = default(int);
					}
					this.SendPropertyChanged("Man");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_System_Client(System_Client entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_System_Client(System_Client entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Issue")]
	public partial class Issue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_iss;
		
		private string _description;
		
		private string _result;
		
		private string _type;
		
		private string _status;
		
		private int _request_id;
		
		private Nullable<int> _prodman_id;
		
		private string _name;
		
		private int _priority;
		
		private EntitySet<Issue_status_history> _Issue_status_history;
		
		private EntitySet<Task> _Task;
		
		private EntityRef<Issue_Type> _Issue_Type;
		
		private EntityRef<Request> _Request;
		
		private EntityRef<Status> _Status1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Onid_issChanging(int value);
    partial void Onid_issChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnresultChanging(string value);
    partial void OnresultChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void Onrequest_idChanging(int value);
    partial void Onrequest_idChanged();
    partial void Onprodman_idChanging(Nullable<int> value);
    partial void Onprodman_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpriorityChanging(int value);
    partial void OnpriorityChanged();
    #endregion
		
		public Issue()
		{
			this._Issue_status_history = new EntitySet<Issue_status_history>(new Action<Issue_status_history>(this.attach_Issue_status_history), new Action<Issue_status_history>(this.detach_Issue_status_history));
			this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
			this._Issue_Type = default(EntityRef<Issue_Type>);
			this._Request = default(EntityRef<Request>);
			this._Status1 = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_iss", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_iss
		{
			get
			{
				return this._id_iss;
			}
			set
			{
				if ((this._id_iss != value))
				{
					this.Onid_issChanging(value);
					this.SendPropertyChanging();
					this._id_iss = value;
					this.SendPropertyChanged("id_iss");
					this.Onid_issChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_result", DbType="VarChar(100)")]
		public string result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					this.OnresultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("result");
					this.OnresultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					if (this._Issue_Type.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					if (this._Status1.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_request_id", DbType="Int NOT NULL")]
		public int request_id
		{
			get
			{
				return this._request_id;
			}
			set
			{
				if ((this._request_id != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrequest_idChanging(value);
					this.SendPropertyChanging();
					this._request_id = value;
					this.SendPropertyChanged("request_id");
					this.Onrequest_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prodman_id", DbType="Int")]
		public Nullable<int> prodman_id
		{
			get
			{
				return this._prodman_id;
			}
			set
			{
				if ((this._prodman_id != value))
				{
					this.Onprodman_idChanging(value);
					this.SendPropertyChanging();
					this._prodman_id = value;
					this.SendPropertyChanged("prodman_id");
					this.Onprodman_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priority", DbType="Int NOT NULL")]
		public int priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Issue_status_history", Storage="_Issue_status_history", ThisKey="id_iss", OtherKey="issue_id")]
		public EntitySet<Issue_status_history> Issue_status_history
		{
			get
			{
				return this._Issue_status_history;
			}
			set
			{
				this._Issue_status_history.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Task", Storage="_Task", ThisKey="id_iss", OtherKey="issue_id")]
		public EntitySet<Task> Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				this._Task.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Type_Issue", Storage="_Issue_Type", ThisKey="type", OtherKey="type", IsForeignKey=true)]
		public Issue_Type Issue_Type
		{
			get
			{
				return this._Issue_Type.Entity;
			}
			set
			{
				Issue_Type previousValue = this._Issue_Type.Entity;
				if (((previousValue != value) 
							|| (this._Issue_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue_Type.Entity = null;
						previousValue.Issue.Remove(this);
					}
					this._Issue_Type.Entity = value;
					if ((value != null))
					{
						value.Issue.Add(this);
						this._type = value.type;
					}
					else
					{
						this._type = default(string);
					}
					this.SendPropertyChanged("Issue_Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_Issue", Storage="_Request", ThisKey="request_id", OtherKey="id_req", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Request Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				Request previousValue = this._Request.Entity;
				if (((previousValue != value) 
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.Issue.Remove(this);
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.Issue.Add(this);
						this._request_id = value.id_req;
					}
					else
					{
						this._request_id = default(int);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Issue", Storage="_Status1", ThisKey="status", OtherKey="status1", IsForeignKey=true)]
		public Status Status1
		{
			get
			{
				return this._Status1.Entity;
			}
			set
			{
				Status previousValue = this._Status1.Entity;
				if (((previousValue != value) 
							|| (this._Status1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status1.Entity = null;
						previousValue.Issue.Remove(this);
					}
					this._Status1.Entity = value;
					if ((value != null))
					{
						value.Issue.Add(this);
						this._status = value.status1;
					}
					else
					{
						this._status = default(string);
					}
					this.SendPropertyChanged("Status1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issue_status_history(Issue_status_history entity)
		{
			this.SendPropertyChanging();
			entity.Issue = this;
		}
		
		private void detach_Issue_status_history(Issue_status_history entity)
		{
			this.SendPropertyChanging();
			entity.Issue = null;
		}
		
		private void attach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Issue = this;
		}
		
		private void detach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Issue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Issue_status_history")]
	public partial class Issue_status_history : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _issue_id;
		
		private string _status;
		
		private DateTime _date;
		
		private EntityRef<Issue> _Issue;
		
		private EntityRef<Status> _Status1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Onissue_idChanging(int value);
    partial void Onissue_idChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OndateChanging(DateTime value);
    partial void OndateChanged();
    #endregion
		
		public Issue_status_history()
		{
			this._Issue = default(EntityRef<Issue>);
			this._Status1 = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_issue_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int issue_id
		{
			get
			{
				return this._issue_id;
			}
			set
			{
				if ((this._issue_id != value))
				{
					if (this._Issue.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onissue_idChanging(value);
					this.SendPropertyChanging();
					this._issue_id = value;
					this.SendPropertyChanged("issue_id");
					this.Onissue_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					if (this._Status1.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Issue_status_history", Storage="_Issue", ThisKey="issue_id", OtherKey="id_iss", IsForeignKey=true)]
		public Issue Issue
		{
			get
			{
				return this._Issue.Entity;
			}
			set
			{
				Issue previousValue = this._Issue.Entity;
				if (((previousValue != value) 
							|| (this._Issue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue.Entity = null;
						previousValue.Issue_status_history.Remove(this);
					}
					this._Issue.Entity = value;
					if ((value != null))
					{
						value.Issue_status_history.Add(this);
						this._issue_id = value.id_iss;
					}
					else
					{
						this._issue_id = default(int);
					}
					this.SendPropertyChanged("Issue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Issue_status_history", Storage="_Status1", ThisKey="status", OtherKey="status1", IsForeignKey=true)]
		public Status Status1
		{
			get
			{
				return this._Status1.Entity;
			}
			set
			{
				Status previousValue = this._Status1.Entity;
				if (((previousValue != value) 
							|| (this._Status1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status1.Entity = null;
						previousValue.Issue_status_history.Remove(this);
					}
					this._Status1.Entity = value;
					if ((value != null))
					{
						value.Issue_status_history.Add(this);
						this._status = value.status1;
					}
					else
					{
						this._status = default(string);
					}
					this.SendPropertyChanged("Status1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Issue_Type")]
	public partial class Issue_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _type;
		
		private string _type_name;
		
		private EntitySet<Issue> _Issue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void Ontype_nameChanging(string value);
    partial void Ontype_nameChanged();
    #endregion
		
		public Issue_Type()
		{
			this._Issue = new EntitySet<Issue>(new Action<Issue>(this.attach_Issue), new Action<Issue>(this.detach_Issue));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type_name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string type_name
		{
			get
			{
				return this._type_name;
			}
			set
			{
				if ((this._type_name != value))
				{
					this.Ontype_nameChanging(value);
					this.SendPropertyChanging();
					this._type_name = value;
					this.SendPropertyChanged("type_name");
					this.Ontype_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Type_Issue", Storage="_Issue", ThisKey="type", OtherKey="type")]
		public EntitySet<Issue> Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				this._Issue.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issue(Issue entity)
		{
			this.SendPropertyChanging();
			entity.Issue_Type = this;
		}
		
		private void detach_Issue(Issue entity)
		{
			this.SendPropertyChanging();
			entity.Issue_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Man")]
	public partial class Man : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _login;
		
		private string _password;
		
		private bool _is_active;
		
		private string _first_name;
		
		private string _last_name;
		
		private int _id_man;
		
		private string _role;
		
		private EntityRef<AcMan> _AcMan;
		
		private EntityRef<Admin> _Admin;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<ProdMan> _ProdMan;
		
		private EntityRef<Worker> _Worker;
		
		private EntityRef<Role> _Role1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onis_activeChanging(bool value);
    partial void Onis_activeChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void Onid_manChanging(int value);
    partial void Onid_manChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    #endregion
		
		public Man()
		{
			this._AcMan = default(EntityRef<AcMan>);
			this._Admin = default(EntityRef<Admin>);
			this._Client = default(EntityRef<Client>);
			this._ProdMan = default(EntityRef<ProdMan>);
			this._Worker = default(EntityRef<Worker>);
			this._Role1 = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_active", DbType="Bit NOT NULL")]
		public bool is_active
		{
			get
			{
				return this._is_active;
			}
			set
			{
				if ((this._is_active != value))
				{
					this.Onis_activeChanging(value);
					this.SendPropertyChanging();
					this._is_active = value;
					this.SendPropertyChanged("is_active");
					this.Onis_activeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_man", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_man
		{
			get
			{
				return this._id_man;
			}
			set
			{
				if ((this._id_man != value))
				{
					this.Onid_manChanging(value);
					this.SendPropertyChanging();
					this._id_man = value;
					this.SendPropertyChanged("id_man");
					this.Onid_manChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					if (this._Role1.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Man_AcMan", Storage="_AcMan", ThisKey="id_man", OtherKey="id_acc", IsUnique=true, IsForeignKey=false)]
		public AcMan AcMan
		{
			get
			{
				return this._AcMan.Entity;
			}
			set
			{
				AcMan previousValue = this._AcMan.Entity;
				if (((previousValue != value) 
							|| (this._AcMan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AcMan.Entity = null;
						previousValue.Man = null;
					}
					this._AcMan.Entity = value;
					if ((value != null))
					{
						value.Man = this;
					}
					this.SendPropertyChanged("AcMan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Man_Admin", Storage="_Admin", ThisKey="id_man", OtherKey="id_admin", IsUnique=true, IsForeignKey=false)]
		public Admin Admin
		{
			get
			{
				return this._Admin.Entity;
			}
			set
			{
				Admin previousValue = this._Admin.Entity;
				if (((previousValue != value) 
							|| (this._Admin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Admin.Entity = null;
						previousValue.Man = null;
					}
					this._Admin.Entity = value;
					if ((value != null))
					{
						value.Man = this;
					}
					this.SendPropertyChanged("Admin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Man_Client", Storage="_Client", ThisKey="id_man", OtherKey="id_cli", IsUnique=true, IsForeignKey=false)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Man = null;
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Man = this;
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Man_ProdMan", Storage="_ProdMan", ThisKey="id_man", OtherKey="id_prod", IsUnique=true, IsForeignKey=false)]
		public ProdMan ProdMan
		{
			get
			{
				return this._ProdMan.Entity;
			}
			set
			{
				ProdMan previousValue = this._ProdMan.Entity;
				if (((previousValue != value) 
							|| (this._ProdMan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProdMan.Entity = null;
						previousValue.Man = null;
					}
					this._ProdMan.Entity = value;
					if ((value != null))
					{
						value.Man = this;
					}
					this.SendPropertyChanged("ProdMan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Man_Worker", Storage="_Worker", ThisKey="id_man", OtherKey="id_work", IsUnique=true, IsForeignKey=false)]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.Man = null;
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.Man = this;
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Man", Storage="_Role1", ThisKey="role", OtherKey="code", IsForeignKey=true)]
		public Role Role1
		{
			get
			{
				return this._Role1.Entity;
			}
			set
			{
				Role previousValue = this._Role1.Entity;
				if (((previousValue != value) 
							|| (this._Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role1.Entity = null;
						previousValue.Man.Remove(this);
					}
					this._Role1.Entity = value;
					if ((value != null))
					{
						value.Man.Add(this);
						this._role = value.code;
					}
					else
					{
						this._role = default(string);
					}
					this.SendPropertyChanged("Role1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProdMan")]
	public partial class ProdMan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_prod;
		
		private EntityRef<Man> _Man;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Onid_prodChanging(int value);
    partial void Onid_prodChanged();
    #endregion
		
		public ProdMan()
		{
			this._Man = default(EntityRef<Man>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_prod", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_prod
		{
			get
			{
				return this._id_prod;
			}
			set
			{
				if ((this._id_prod != value))
				{
					if (this._Man.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_prodChanging(value);
					this.SendPropertyChanging();
					this._id_prod = value;
					this.SendPropertyChanged("id_prod");
					this.Onid_prodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Man_ProdMan", Storage="_Man", ThisKey="id_prod", OtherKey="id_man", IsForeignKey=true)]
		public Man Man
		{
			get
			{
				return this._Man.Entity;
			}
			set
			{
				Man previousValue = this._Man.Entity;
				if (((previousValue != value) 
							|| (this._Man.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Man.Entity = null;
						previousValue.ProdMan = null;
					}
					this._Man.Entity = value;
					if ((value != null))
					{
						value.ProdMan = this;
						this._id_prod = value.id_man;
					}
					else
					{
						this._id_prod = default(int);
					}
					this.SendPropertyChanged("Man");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Request")]
	public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_req;
		
		private string _description;
		
		private string _result;
		
		private string _status;
		
		private Nullable<int> _acman_id;
		
		private Nullable<int> _systems_id;
		
		private string _name;
		
		private int _priority;
		
		private EntitySet<Issue> _Issue;
		
		private EntitySet<Request_status_history> _Request_status_history;
		
		private EntityRef<AcMan> _AcMan;
		
		private EntityRef<Status> _Status1;
		
		private EntityRef<System_Client> _System_Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Onid_reqChanging(int value);
    partial void Onid_reqChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnresultChanging(string value);
    partial void OnresultChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void Onacman_idChanging(Nullable<int> value);
    partial void Onacman_idChanged();
    partial void Onsystems_idChanging(Nullable<int> value);
    partial void Onsystems_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpriorityChanging(int value);
    partial void OnpriorityChanged();
    #endregion
		
		public Request()
		{
			this._Issue = new EntitySet<Issue>(new Action<Issue>(this.attach_Issue), new Action<Issue>(this.detach_Issue));
			this._Request_status_history = new EntitySet<Request_status_history>(new Action<Request_status_history>(this.attach_Request_status_history), new Action<Request_status_history>(this.detach_Request_status_history));
			this._AcMan = default(EntityRef<AcMan>);
			this._Status1 = default(EntityRef<Status>);
			this._System_Client = default(EntityRef<System_Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_req", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_req
		{
			get
			{
				return this._id_req;
			}
			set
			{
				if ((this._id_req != value))
				{
					this.Onid_reqChanging(value);
					this.SendPropertyChanging();
					this._id_req = value;
					this.SendPropertyChanged("id_req");
					this.Onid_reqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_result", DbType="VarChar(100)")]
		public string result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					this.OnresultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("result");
					this.OnresultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					if (this._Status1.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acman_id", DbType="Int")]
		public Nullable<int> acman_id
		{
			get
			{
				return this._acman_id;
			}
			set
			{
				if ((this._acman_id != value))
				{
					if (this._AcMan.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onacman_idChanging(value);
					this.SendPropertyChanging();
					this._acman_id = value;
					this.SendPropertyChanged("acman_id");
					this.Onacman_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_systems_id", DbType="Int")]
		public Nullable<int> systems_id
		{
			get
			{
				return this._systems_id;
			}
			set
			{
				if ((this._systems_id != value))
				{
					if (this._System_Client.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsystems_idChanging(value);
					this.SendPropertyChanging();
					this._systems_id = value;
					this.SendPropertyChanged("systems_id");
					this.Onsystems_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priority", DbType="Int NOT NULL")]
		public int priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_Issue", Storage="_Issue", ThisKey="id_req", OtherKey="request_id")]
		public EntitySet<Issue> Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				this._Issue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_Request_status_history", Storage="_Request_status_history", ThisKey="id_req", OtherKey="request_id")]
		public EntitySet<Request_status_history> Request_status_history
		{
			get
			{
				return this._Request_status_history;
			}
			set
			{
				this._Request_status_history.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcMan_Request", Storage="_AcMan", ThisKey="acman_id", OtherKey="id_acc", IsForeignKey=true, DeleteRule="SET NULL")]
		public AcMan AcMan
		{
			get
			{
				return this._AcMan.Entity;
			}
			set
			{
				AcMan previousValue = this._AcMan.Entity;
				if (((previousValue != value) 
							|| (this._AcMan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AcMan.Entity = null;
						previousValue.Request.Remove(this);
					}
					this._AcMan.Entity = value;
					if ((value != null))
					{
						value.Request.Add(this);
						this._acman_id = value.id_acc;
					}
					else
					{
						this._acman_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("AcMan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Request", Storage="_Status1", ThisKey="status", OtherKey="status1", IsForeignKey=true)]
		public Status Status1
		{
			get
			{
				return this._Status1.Entity;
			}
			set
			{
				Status previousValue = this._Status1.Entity;
				if (((previousValue != value) 
							|| (this._Status1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status1.Entity = null;
						previousValue.Request.Remove(this);
					}
					this._Status1.Entity = value;
					if ((value != null))
					{
						value.Request.Add(this);
						this._status = value.status1;
					}
					else
					{
						this._status = default(string);
					}
					this.SendPropertyChanged("Status1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="System_Client_Request", Storage="_System_Client", ThisKey="systems_id", OtherKey="id_systems", IsForeignKey=true)]
		public System_Client System_Client
		{
			get
			{
				return this._System_Client.Entity;
			}
			set
			{
				System_Client previousValue = this._System_Client.Entity;
				if (((previousValue != value) 
							|| (this._System_Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._System_Client.Entity = null;
						previousValue.Request.Remove(this);
					}
					this._System_Client.Entity = value;
					if ((value != null))
					{
						value.Request.Add(this);
						this._systems_id = value.id_systems;
					}
					else
					{
						this._systems_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("System_Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issue(Issue entity)
		{
			this.SendPropertyChanging();
			entity.Request = this;
		}
		
		private void detach_Issue(Issue entity)
		{
			this.SendPropertyChanging();
			entity.Request = null;
		}
		
		private void attach_Request_status_history(Request_status_history entity)
		{
			this.SendPropertyChanging();
			entity.Request = this;
		}
		
		private void detach_Request_status_history(Request_status_history entity)
		{
			this.SendPropertyChanging();
			entity.Request = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Request_status_history")]
	public partial class Request_status_history : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _request_id;
		
		private string _status;
		
		private DateTime _date;
		
		private EntityRef<Request> _Request;
		
		private EntityRef<Status> _Status1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Onrequest_idChanging(int value);
    partial void Onrequest_idChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OndateChanging(DateTime value);
    partial void OndateChanged();
    #endregion
		
		public Request_status_history()
		{
			this._Request = default(EntityRef<Request>);
			this._Status1 = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_request_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int request_id
		{
			get
			{
				return this._request_id;
			}
			set
			{
				if ((this._request_id != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrequest_idChanging(value);
					this.SendPropertyChanging();
					this._request_id = value;
					this.SendPropertyChanged("request_id");
					this.Onrequest_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					if (this._Status1.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_Request_status_history", Storage="_Request", ThisKey="request_id", OtherKey="id_req", IsForeignKey=true)]
		public Request Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				Request previousValue = this._Request.Entity;
				if (((previousValue != value) 
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.Request_status_history.Remove(this);
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.Request_status_history.Add(this);
						this._request_id = value.id_req;
					}
					else
					{
						this._request_id = default(int);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Request_status_history", Storage="_Status1", ThisKey="status", OtherKey="status1", IsForeignKey=true)]
		public Status Status1
		{
			get
			{
				return this._Status1.Entity;
			}
			set
			{
				Status previousValue = this._Status1.Entity;
				if (((previousValue != value) 
							|| (this._Status1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status1.Entity = null;
						previousValue.Request_status_history.Remove(this);
					}
					this._Status1.Entity = value;
					if ((value != null))
					{
						value.Request_status_history.Add(this);
						this._status = value.status1;
					}
					else
					{
						this._status = default(string);
					}
					this.SendPropertyChanged("Status1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _code;
		
		private string _role1;
		
		private EntitySet<Man> _Man;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void Onrole1Changing(string value);
    partial void Onrole1Changed();
    #endregion
		
		public Role()
		{
			this._Man = new EntitySet<Man>(new Action<Man>(this.attach_Man), new Action<Man>(this.detach_Man));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="role", Storage="_role1", DbType="VarChar(20)")]
		public string role1
		{
			get
			{
				return this._role1;
			}
			set
			{
				if ((this._role1 != value))
				{
					this.Onrole1Changing(value);
					this.SendPropertyChanging();
					this._role1 = value;
					this.SendPropertyChanged("role1");
					this.Onrole1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Man", Storage="_Man", ThisKey="code", OtherKey="role")]
		public EntitySet<Man> Man
		{
			get
			{
				return this._Man;
			}
			set
			{
				this._Man.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Man(Man entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = this;
		}
		
		private void detach_Man(Man entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _status1;
		
		private string _status_name;
		
		private EntitySet<Issue> _Issue;
		
		private EntitySet<Issue_status_history> _Issue_status_history;
		
		private EntitySet<Request> _Request;
		
		private EntitySet<Request_status_history> _Request_status_history;
		
		private EntitySet<Task> _Task;
		
		private EntitySet<Task_status_history> _Task_status_history;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Onstatus1Changing(string value);
    partial void Onstatus1Changed();
    partial void Onstatus_nameChanging(string value);
    partial void Onstatus_nameChanged();
    #endregion
		
		public Status()
		{
			this._Issue = new EntitySet<Issue>(new Action<Issue>(this.attach_Issue), new Action<Issue>(this.detach_Issue));
			this._Issue_status_history = new EntitySet<Issue_status_history>(new Action<Issue_status_history>(this.attach_Issue_status_history), new Action<Issue_status_history>(this.detach_Issue_status_history));
			this._Request = new EntitySet<Request>(new Action<Request>(this.attach_Request), new Action<Request>(this.detach_Request));
			this._Request_status_history = new EntitySet<Request_status_history>(new Action<Request_status_history>(this.attach_Request_status_history), new Action<Request_status_history>(this.detach_Request_status_history));
			this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
			this._Task_status_history = new EntitySet<Task_status_history>(new Action<Task_status_history>(this.attach_Task_status_history), new Action<Task_status_history>(this.detach_Task_status_history));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="status", Storage="_status1", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string status1
		{
			get
			{
				return this._status1;
			}
			set
			{
				if ((this._status1 != value))
				{
					this.Onstatus1Changing(value);
					this.SendPropertyChanging();
					this._status1 = value;
					this.SendPropertyChanged("status1");
					this.Onstatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status_name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string status_name
		{
			get
			{
				return this._status_name;
			}
			set
			{
				if ((this._status_name != value))
				{
					this.Onstatus_nameChanging(value);
					this.SendPropertyChanging();
					this._status_name = value;
					this.SendPropertyChanged("status_name");
					this.Onstatus_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Issue", Storage="_Issue", ThisKey="status1", OtherKey="status")]
		public EntitySet<Issue> Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				this._Issue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Issue_status_history", Storage="_Issue_status_history", ThisKey="status1", OtherKey="status")]
		public EntitySet<Issue_status_history> Issue_status_history
		{
			get
			{
				return this._Issue_status_history;
			}
			set
			{
				this._Issue_status_history.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Request", Storage="_Request", ThisKey="status1", OtherKey="status")]
		public EntitySet<Request> Request
		{
			get
			{
				return this._Request;
			}
			set
			{
				this._Request.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Request_status_history", Storage="_Request_status_history", ThisKey="status1", OtherKey="status")]
		public EntitySet<Request_status_history> Request_status_history
		{
			get
			{
				return this._Request_status_history;
			}
			set
			{
				this._Request_status_history.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Task", Storage="_Task", ThisKey="status1", OtherKey="status")]
		public EntitySet<Task> Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				this._Task.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Task_status_history", Storage="_Task_status_history", ThisKey="status1", OtherKey="status")]
		public EntitySet<Task_status_history> Task_status_history
		{
			get
			{
				return this._Task_status_history;
			}
			set
			{
				this._Task_status_history.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issue(Issue entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = this;
		}
		
		private void detach_Issue(Issue entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = null;
		}
		
		private void attach_Issue_status_history(Issue_status_history entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = this;
		}
		
		private void detach_Issue_status_history(Issue_status_history entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = null;
		}
		
		private void attach_Request(Request entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = this;
		}
		
		private void detach_Request(Request entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = null;
		}
		
		private void attach_Request_status_history(Request_status_history entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = this;
		}
		
		private void detach_Request_status_history(Request_status_history entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = null;
		}
		
		private void attach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = this;
		}
		
		private void detach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = null;
		}
		
		private void attach_Task_status_history(Task_status_history entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = this;
		}
		
		private void detach_Task_status_history(Task_status_history entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.System")]
	public partial class System : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_sys;
		
		private string _name;
		
		private string _versions;
		
		private EntitySet<System_Client> _System_Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Onid_sysChanging(int value);
    partial void Onid_sysChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnversionsChanging(string value);
    partial void OnversionsChanged();
    #endregion
		
		public System()
		{
			this._System_Client = new EntitySet<System_Client>(new Action<System_Client>(this.attach_System_Client), new Action<System_Client>(this.detach_System_Client));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_sys", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_sys
		{
			get
			{
				return this._id_sys;
			}
			set
			{
				if ((this._id_sys != value))
				{
					this.Onid_sysChanging(value);
					this.SendPropertyChanging();
					this._id_sys = value;
					this.SendPropertyChanged("id_sys");
					this.Onid_sysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_versions", DbType="VarChar(MAX)")]
		public string versions
		{
			get
			{
				return this._versions;
			}
			set
			{
				if ((this._versions != value))
				{
					this.OnversionsChanging(value);
					this.SendPropertyChanging();
					this._versions = value;
					this.SendPropertyChanged("versions");
					this.OnversionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="System_System_Client", Storage="_System_Client", ThisKey="id_sys", OtherKey="system_id")]
		public EntitySet<System_Client> System_Client
		{
			get
			{
				return this._System_Client;
			}
			set
			{
				this._System_Client.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_System_Client(System_Client entity)
		{
			this.SendPropertyChanging();
			entity.System = this;
		}
		
		private void detach_System_Client(System_Client entity)
		{
			this.SendPropertyChanging();
			entity.System = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[System-Client]")]
	public partial class System_Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_systems;
		
		private int _client_id;
		
		private int _system_id;
		
		private string _version;
		
		private EntitySet<Request> _Request;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<System> _System;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Onid_systemsChanging(int value);
    partial void Onid_systemsChanged();
    partial void Onclient_idChanging(int value);
    partial void Onclient_idChanged();
    partial void Onsystem_idChanging(int value);
    partial void Onsystem_idChanged();
    partial void OnversionChanging(string value);
    partial void OnversionChanged();
    #endregion
		
		public System_Client()
		{
			this._Request = new EntitySet<Request>(new Action<Request>(this.attach_Request), new Action<Request>(this.detach_Request));
			this._Client = default(EntityRef<Client>);
			this._System = default(EntityRef<System>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_systems", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_systems
		{
			get
			{
				return this._id_systems;
			}
			set
			{
				if ((this._id_systems != value))
				{
					this.Onid_systemsChanging(value);
					this.SendPropertyChanging();
					this._id_systems = value;
					this.SendPropertyChanged("id_systems");
					this.Onid_systemsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_client_id", DbType="Int NOT NULL")]
		public int client_id
		{
			get
			{
				return this._client_id;
			}
			set
			{
				if ((this._client_id != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onclient_idChanging(value);
					this.SendPropertyChanging();
					this._client_id = value;
					this.SendPropertyChanged("client_id");
					this.Onclient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_system_id", DbType="Int NOT NULL")]
		public int system_id
		{
			get
			{
				return this._system_id;
			}
			set
			{
				if ((this._system_id != value))
				{
					if (this._System.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsystem_idChanging(value);
					this.SendPropertyChanging();
					this._system_id = value;
					this.SendPropertyChanged("system_id");
					this.Onsystem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="System_Client_Request", Storage="_Request", ThisKey="id_systems", OtherKey="systems_id")]
		public EntitySet<Request> Request
		{
			get
			{
				return this._Request;
			}
			set
			{
				this._Request.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_System_Client", Storage="_Client", ThisKey="client_id", OtherKey="id_cli", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.System_Client.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.System_Client.Add(this);
						this._client_id = value.id_cli;
					}
					else
					{
						this._client_id = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="System_System_Client", Storage="_System", ThisKey="system_id", OtherKey="id_sys", IsForeignKey=true)]
		public System System
		{
			get
			{
				return this._System.Entity;
			}
			set
			{
				System previousValue = this._System.Entity;
				if (((previousValue != value) 
							|| (this._System.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._System.Entity = null;
						previousValue.System_Client.Remove(this);
					}
					this._System.Entity = value;
					if ((value != null))
					{
						value.System_Client.Add(this);
						this._system_id = value.id_sys;
					}
					else
					{
						this._system_id = default(int);
					}
					this.SendPropertyChanged("System");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Request(Request entity)
		{
			this.SendPropertyChanging();
			entity.System_Client = this;
		}
		
		private void detach_Request(Request entity)
		{
			this.SendPropertyChanging();
			entity.System_Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_task;
		
		private string _description;
		
		private string _result;
		
		private string _status;
		
		private string _type;
		
		private int _issue_id;
		
		private Nullable<int> _worker_id;
		
		private Nullable<int> _seq;
		
		private string _name;
		
		private int _priority;
		
		private EntitySet<Task_status_history> _Task_status_history;
		
		private EntityRef<Issue> _Issue;
		
		private EntityRef<Status> _Status1;
		
		private EntityRef<Task_Type> _Task_Type;
		
		private EntityRef<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Onid_taskChanging(int value);
    partial void Onid_taskChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnresultChanging(string value);
    partial void OnresultChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void Onissue_idChanging(int value);
    partial void Onissue_idChanged();
    partial void Onworker_idChanging(Nullable<int> value);
    partial void Onworker_idChanged();
    partial void OnseqChanging(Nullable<int> value);
    partial void OnseqChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpriorityChanging(int value);
    partial void OnpriorityChanged();
    #endregion
		
		public Task()
		{
			this._Task_status_history = new EntitySet<Task_status_history>(new Action<Task_status_history>(this.attach_Task_status_history), new Action<Task_status_history>(this.detach_Task_status_history));
			this._Issue = default(EntityRef<Issue>);
			this._Status1 = default(EntityRef<Status>);
			this._Task_Type = default(EntityRef<Task_Type>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_task", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_task
		{
			get
			{
				return this._id_task;
			}
			set
			{
				if ((this._id_task != value))
				{
					this.Onid_taskChanging(value);
					this.SendPropertyChanging();
					this._id_task = value;
					this.SendPropertyChanged("id_task");
					this.Onid_taskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_result", DbType="VarChar(100)")]
		public string result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					this.OnresultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("result");
					this.OnresultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					if (this._Status1.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					if (this._Task_Type.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_issue_id", DbType="Int NOT NULL")]
		public int issue_id
		{
			get
			{
				return this._issue_id;
			}
			set
			{
				if ((this._issue_id != value))
				{
					if (this._Issue.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onissue_idChanging(value);
					this.SendPropertyChanging();
					this._issue_id = value;
					this.SendPropertyChanged("issue_id");
					this.Onissue_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_worker_id", DbType="Int")]
		public Nullable<int> worker_id
		{
			get
			{
				return this._worker_id;
			}
			set
			{
				if ((this._worker_id != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onworker_idChanging(value);
					this.SendPropertyChanging();
					this._worker_id = value;
					this.SendPropertyChanged("worker_id");
					this.Onworker_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seq", DbType="Int")]
		public Nullable<int> seq
		{
			get
			{
				return this._seq;
			}
			set
			{
				if ((this._seq != value))
				{
					this.OnseqChanging(value);
					this.SendPropertyChanging();
					this._seq = value;
					this.SendPropertyChanged("seq");
					this.OnseqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priority", DbType="Int NOT NULL")]
		public int priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Task_status_history", Storage="_Task_status_history", ThisKey="id_task", OtherKey="task_id")]
		public EntitySet<Task_status_history> Task_status_history
		{
			get
			{
				return this._Task_status_history;
			}
			set
			{
				this._Task_status_history.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Task", Storage="_Issue", ThisKey="issue_id", OtherKey="id_iss", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Issue Issue
		{
			get
			{
				return this._Issue.Entity;
			}
			set
			{
				Issue previousValue = this._Issue.Entity;
				if (((previousValue != value) 
							|| (this._Issue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue.Entity = null;
						previousValue.Task.Remove(this);
					}
					this._Issue.Entity = value;
					if ((value != null))
					{
						value.Task.Add(this);
						this._issue_id = value.id_iss;
					}
					else
					{
						this._issue_id = default(int);
					}
					this.SendPropertyChanged("Issue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Task", Storage="_Status1", ThisKey="status", OtherKey="status1", IsForeignKey=true)]
		public Status Status1
		{
			get
			{
				return this._Status1.Entity;
			}
			set
			{
				Status previousValue = this._Status1.Entity;
				if (((previousValue != value) 
							|| (this._Status1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status1.Entity = null;
						previousValue.Task.Remove(this);
					}
					this._Status1.Entity = value;
					if ((value != null))
					{
						value.Task.Add(this);
						this._status = value.status1;
					}
					else
					{
						this._status = default(string);
					}
					this.SendPropertyChanged("Status1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Type_Task", Storage="_Task_Type", ThisKey="type", OtherKey="type", IsForeignKey=true)]
		public Task_Type Task_Type
		{
			get
			{
				return this._Task_Type.Entity;
			}
			set
			{
				Task_Type previousValue = this._Task_Type.Entity;
				if (((previousValue != value) 
							|| (this._Task_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task_Type.Entity = null;
						previousValue.Task.Remove(this);
					}
					this._Task_Type.Entity = value;
					if ((value != null))
					{
						value.Task.Add(this);
						this._type = value.type;
					}
					else
					{
						this._type = default(string);
					}
					this.SendPropertyChanged("Task_Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_Task", Storage="_Worker", ThisKey="worker_id", OtherKey="id_work", IsForeignKey=true, DeleteRule="SET NULL")]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.Task.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.Task.Add(this);
						this._worker_id = value.id_work;
					}
					else
					{
						this._worker_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Task_status_history(Task_status_history entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_Task_status_history(Task_status_history entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task_status_history")]
	public partial class Task_status_history : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _task_id;
		
		private string _status;
		
		private DateTime _date;
		
		private EntityRef<Status> _Status1;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Ontask_idChanging(int value);
    partial void Ontask_idChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OndateChanging(DateTime value);
    partial void OndateChanged();
    #endregion
		
		public Task_status_history()
		{
			this._Status1 = default(EntityRef<Status>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_task_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int task_id
		{
			get
			{
				return this._task_id;
			}
			set
			{
				if ((this._task_id != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontask_idChanging(value);
					this.SendPropertyChanging();
					this._task_id = value;
					this.SendPropertyChanged("task_id");
					this.Ontask_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					if (this._Status1.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Task_status_history", Storage="_Status1", ThisKey="status", OtherKey="status1", IsForeignKey=true)]
		public Status Status1
		{
			get
			{
				return this._Status1.Entity;
			}
			set
			{
				Status previousValue = this._Status1.Entity;
				if (((previousValue != value) 
							|| (this._Status1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status1.Entity = null;
						previousValue.Task_status_history.Remove(this);
					}
					this._Status1.Entity = value;
					if ((value != null))
					{
						value.Task_status_history.Add(this);
						this._status = value.status1;
					}
					else
					{
						this._status = default(string);
					}
					this.SendPropertyChanged("Status1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Task_status_history", Storage="_Task", ThisKey="task_id", OtherKey="id_task", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.Task_status_history.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.Task_status_history.Add(this);
						this._task_id = value.id_task;
					}
					else
					{
						this._task_id = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task_Type")]
	public partial class Task_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _type;
		
		private string _type_name;
		
		private EntitySet<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void Ontype_nameChanging(string value);
    partial void Ontype_nameChanged();
    #endregion
		
		public Task_Type()
		{
			this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type_name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string type_name
		{
			get
			{
				return this._type_name;
			}
			set
			{
				if ((this._type_name != value))
				{
					this.Ontype_nameChanging(value);
					this.SendPropertyChanging();
					this._type_name = value;
					this.SendPropertyChanged("type_name");
					this.Ontype_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Type_Task", Storage="_Task", ThisKey="type", OtherKey="type")]
		public EntitySet<Task> Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				this._Task.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Task_Type = this;
		}
		
		private void detach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Task_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Worker")]
	public partial class Worker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_work;
		
		private EntitySet<Task> _Task;
		
		private EntityRef<Man> _Man;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void Onid_workChanging(int value);
    partial void Onid_workChanged();
    #endregion
		
		public Worker()
		{
			this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
			this._Man = default(EntityRef<Man>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_work", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_work
		{
			get
			{
				return this._id_work;
			}
			set
			{
				if ((this._id_work != value))
				{
					if (this._Man.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_workChanging(value);
					this.SendPropertyChanging();
					this._id_work = value;
					this.SendPropertyChanged("id_work");
					this.Onid_workChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_Task", Storage="_Task", ThisKey="id_work", OtherKey="worker_id")]
		public EntitySet<Task> Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				this._Task.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Man_Worker", Storage="_Man", ThisKey="id_work", OtherKey="id_man", IsForeignKey=true)]
		public Man Man
		{
			get
			{
				return this._Man.Entity;
			}
			set
			{
				Man previousValue = this._Man.Entity;
				if (((previousValue != value) 
							|| (this._Man.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Man.Entity = null;
						previousValue.Worker = null;
					}
					this._Man.Entity = value;
					if ((value != null))
					{
						value.Worker = this;
						this._id_work = value.id_man;
					}
					else
					{
						this._id_work = default(int);
					}
					this.SendPropertyChanged("Man");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
	}
}
#pragma warning restore 1591
